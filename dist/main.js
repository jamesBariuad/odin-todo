(()=>{"use strict";var t={663:(t,e,n)=>{n.d(e,{Z:()=>i});var o=n(537),r=n.n(o),c=n(645),a=n.n(c)()(r());a.push([t.id,'[contentEditable="true"]:empty:not(:focus):before {\n  content: attr(data-text);\n}\n\n.active-button{\n    background-color: red;\n}\n',"",{version:3,sources:["webpack://./src/assets/css/handleAddTask.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:['[contentEditable="true"]:empty:not(:focus):before {\n  content: attr(data-text);\n}\n\n.active-button{\n    background-color: red;\n}\n'],sourceRoot:""}]);const i=a},158:(t,e,n)=>{n.d(e,{Z:()=>i});var o=n(537),r=n.n(o),c=n(645),a=n.n(c)()(r());a.push([t.id,"*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody{\n    background-color: green;\n    min-height: 100vh;\n    display: grid;\n    grid-template-columns: 2fr 10fr;\n    grid-template-rows: 1fr 10fr 1fr;\n}\n\nheader{\n    grid-column: span 2;\n}\n\nmain{\n    display: grid;\n    grid-template-columns: 300px  1fr;\n    grid-column: span 2;\n}\n\n#sidebar{\n display: grid;\n grid-auto-rows: 50px;\n\n /* gap: 10px; */\n}\n\nfooter{\n    margin-top: auto;\n}","",{version:3,sources:["webpack://./src/assets/css/layout.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;IACvB,iBAAiB;IACjB,aAAa;IACb,+BAA+B;IAC/B,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,iCAAiC;IACjC,mBAAmB;AACvB;;AAEA;CACC,aAAa;CACb,oBAAoB;;CAEpB,eAAe;AAChB;;AAEA;IACI,gBAAgB;AACpB",sourcesContent:["*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody{\n    background-color: green;\n    min-height: 100vh;\n    display: grid;\n    grid-template-columns: 2fr 10fr;\n    grid-template-rows: 1fr 10fr 1fr;\n}\n\nheader{\n    grid-column: span 2;\n}\n\nmain{\n    display: grid;\n    grid-template-columns: 300px  1fr;\n    grid-column: span 2;\n}\n\n#sidebar{\n display: grid;\n grid-auto-rows: 50px;\n\n /* gap: 10px; */\n}\n\nfooter{\n    margin-top: auto;\n}"],sourceRoot:""}]);const i=a},209:(t,e,n)=>{n.d(e,{Z:()=>i});var o=n(537),r=n.n(o),c=n(645),a=n.n(c)()(r());a.push([t.id,"#pop-up {\n    position: absolute;\n    bottom: 5em;\n    left: 2em;\n}","",{version:3,sources:["webpack://./src/assets/css/taskCompletePopup.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,WAAW;IACX,SAAS;AACb",sourcesContent:["#pop-up {\n    position: absolute;\n    bottom: 5em;\n    left: 2em;\n}"],sourceRoot:""}]);const i=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,c){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(a[d]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);o&&a[l[0]]||(void 0!==c&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=c),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(r," */");return[e].concat([c]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var c={},a=[],i=0;i<t.length;i++){var d=t[i],s=o.base?d[0]+o.base:d[0],l=c[s]||0,u="".concat(s," ").concat(l);c[s]=l+1;var m=n(u),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var v=r(p,o);o.byIndex=i,e.splice(i,0,{identifier:u,updater:v,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var c=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<c.length;a++){var i=n(c[a]);e[i].references--}for(var d=o(t,r),s=0;s<c.length;s++){var l=n(c[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}c=d}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var c=n.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var c=e[o]={id:o,exports:{}};return t[o](c,c.exports,n),c.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=(t,e,n,o,r)=>({title:t,description:e,dueDate:n,priority:o,dateAdded:r});function e(){const t=document.querySelector(".add-task"),e=document.createElement("div");return e.id="task-form",e.append(o(),r(),c(),a(),d(),s()),t.replaceWith(e),t}const o=()=>{const t=document.createElement("div");return t.setAttribute("contentEditable","true"),t.setAttribute("data-text","Task Name"),t},r=()=>{const t=document.createElement("div");return t.setAttribute("contentEditable","true"),t.setAttribute("data-text","Task Description"),t},c=()=>{let t="";const e=document.createElement("div");e.textContent="Due Date:";const n=document.createElement("input");return n.setAttribute("type","date"),n.addEventListener("change",(e=>(e=>{t=e.target.value})(e))),e.append(n),e},a=()=>{const t=document.createElement("div");t.textContent="Priority:";const e=document.createElement("button"),n=document.createElement("button"),o=document.createElement("button");e.textContent="low",n.textContent="medium",o.textContent="high";const r=t=>{let r="";return e.classList.remove("active-button"),n.classList.remove("active-button"),o.classList.remove("active-button"),"low"==t.target.innerText?e.classList.add("active-button"):"medium"==t.target.innerText?n.classList.add("active-button"):o.classList.add("active-button"),r=t.target.innerText,r};return e.addEventListener("click",(t=>r(t))),n.addEventListener("click",(t=>r(t))),o.addEventListener("click",(t=>r(t))),t.append(e,n,o),t},i=()=>{const e=document.querySelector("#main-content"),n=document.querySelector('[data-text="Task Name"]'),o=document.querySelector('[data-text="Task Description"]'),r=document.querySelector('input[type="date"]'),c=document.querySelector('button[class="active-button"]');let a="",i="";if(!n.innerHTML)return alert("please fill Task Name field");if(a=r.value?r.value:"no due date",i=c?c.innerHTML:"no priority set",null!==localStorage.getItem(`${n.innerHTML}`))return alert(`Task ${n.innerHTML} already exist!`);const d=(new Date).toISOString(),s=t(`${n.textContent}`,`${o.textContent}`,`${a}`,`${i}`,d);localStorage.setItem(`${n.textContent}`,JSON.stringify(s)),e.replaceChildren(),M()},d=()=>{const t=document.createElement("button");return t.textContent="add",t.addEventListener("click",i),t},s=()=>{const t=document.createElement("button");return t.textContent="cancel",t.addEventListener("click",(()=>{const t=et();document.querySelector("#task-form").replaceWith(t)})),t},l=(t,e)=>{document.querySelector("main-content");const n=document.createElement("div");n.id="pop-up",n.textContent="1 task completed!   ";const o=document.createElement("span");o.textContent="undo",o.addEventListener("click",(()=>((t,e,n)=>{const o=document.querySelector("#project-title").textContent,r=JSON.parse(localStorage.getItem("Projects")),c=r.findIndex((t=>t.title==o));r[c].tasks.splice(n,0,t),localStorage.setItem("Projects",JSON.stringify(r)),e.remove(),y(o)})(t,n,e))),n.append(o),setTimeout((()=>{n.remove()}),2e3),document.body.append(n)},u=()=>{const t=document.createElement("input");return t.type="checkbox",t.addEventListener("click",(t=>(t=>{const e=document.querySelector("#project-title").textContent,n=t.target.parentElement.id,o=JSON.parse(localStorage.getItem("Projects")),r=o.findIndex((t=>t.title==e)),c=o[r],a=c.tasks.findIndex((t=>t.title==n)),i=c.tasks[a];c.tasks.splice(a,1),localStorage.setItem("Projects",JSON.stringify(o)),y(e),l(i,a)})(t))),t},m=t=>{const e=document.querySelector("#main-content"),n=document.createElement("div");return n.id="project-title",n.textContent=t,e.replaceChildren(),e.append(n),e},p=()=>{const t=document.querySelector("#sidebar-projects"),e=JSON.parse(localStorage.getItem("Projects"));if(e){t.replaceChildren(),t.textContent="Projects";for(let n=0;n<e.length;n++){const o=document.createElement("div");o.textContent=e[n].title,t.append(o),o.addEventListener("click",(t=>{return e=t.target.textContent,m(e),void y(e);var e}))}t.append(tt())}},v=()=>{const e=document.querySelector("#project-title"),n=document.querySelector('[data-text="Task Name"]'),o=document.querySelector('[data-text="Task Description"]'),r=document.querySelector('input[type="date"]'),c=document.querySelector('button[class="active-button"]');let a="",i="";a=r.value?r.value:"no due date",i=c?c.innerHTML:"no priority set";const d=(new Date).toISOString(),s=t(`${n.textContent}`,`${o.textContent}`,`${a}`,`${i}`,d);g(s),y(e.textContent)},g=t=>{const e=JSON.parse(localStorage.getItem("Projects")),n=document.querySelector("#project-title").textContent,o=e.findIndex((t=>t.title==n)),r=e[o].tasks;r.push(t),e[o].tasks=r,localStorage.setItem("Projects",JSON.stringify(e))},y=t=>{const e=document.querySelector("#main-content");e.replaceChildren(),m(t);const n=document.createElement("div"),o=JSON.parse(localStorage.getItem("Projects"));if(!o)return console.log(o,C()),e.append(C());const r=o.map((t=>t.title)).indexOf(t),c=o[r];for(let t=0;t<c.tasks.length;t++)n.append(f(c.tasks[t]));e.append(n,C())},f=t=>{const e=document.createElement("div");e.id=t.title;const n=document.createElement("div"),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),a=u();return n.innerHTML=`Task:${t.title}`,o.innerHTML=`details:${t.description}`,r.textContent=`Due date:${t.dueDate}`,c.textContent=`Priority:${t.priority}`,e.addEventListener("click",(t=>k(t))),e.append(a,n,o,r,c),e},C=()=>{const t=document.createElement("div");t.textContent="Add a task",t.id="add-task";const e=document.createElement("div");return e.id="task-form",t.addEventListener("click",(()=>t.replaceWith(e))),e.append(o(),r(),c(),a(),(()=>{const t=document.createElement("button");return t.type="button",t.textContent="Add",t.addEventListener("click",v),t})(),((t,e)=>{const n=document.createElement("button");n.type="button",n.textContent="cancel",n.addEventListener("click",(()=>o(t,e)));const o=(t,e)=>{e.replaceWith(t)};return n})(t,e)),t},x=t=>{const e=document.createElement("div"),n=document.createElement("input");return n.type="date",n.value=t.dueDate,e.textContent="Due date:",e.append(n),e},E=t=>{const e=document.createElement("div");e.textContent="Priority:";const n=document.createElement("button"),o=document.createElement("button"),r=document.createElement("button");n.textContent="low",o.textContent="medium",r.textContent="high";const c=t=>{let e="";return n.classList.remove("active-button"),o.classList.remove("active-button"),r.classList.remove("active-button"),"low"==t.target.innerText?n.classList.add("active-button"):"medium"==t.target.innerText?o.classList.add("active-button"):"high"==t.target.innerText&&r.classList.add("active-button"),e=t.target.innerText,e};return n.addEventListener("click",(t=>c(t))),o.addEventListener("click",(t=>c(t))),r.addEventListener("click",(t=>c(t))),e.append(n,o,r),null==t||("low"==t.priority?n.classList.add("active-button"):"medium"==t.priority?o.classList.add("active-button"):"high"==t.priority&&r.classList.add("active-button")),e},S=()=>{const t=document.querySelector("#project-title").textContent,e=document.createElement("button");return e.type="button",e.addEventListener("click",(()=>y(t))),e.textContent="Cancel",e},A=t=>{const e=document.createElement("button");e.type="button",e.textContent="Submit";const n=b(t.title);return e.addEventListener("click",(()=>((t,e)=>{const n=document.querySelector("#project-title").textContent,o=document.querySelector('[data-text="Task Name"]').textContent,r=document.querySelector('[data-text="Task Description"]').textContent,c=document.querySelector('input[type="date"]').value,a=document.querySelector(".active-button");if(t.title=o,t.description=r,!o)return y(n),alert("Input a task name");t.dueDate?t.dueDate=c:t.dueDate="no due date",t.priority=a?a.textContent:"no priority set",((t,e)=>{const n=JSON.parse(localStorage.getItem("Projects")),o=document.querySelector("#project-title").textContent;n.find((t=>t.title==o)).tasks[e]=t,localStorage.setItem("Projects",JSON.stringify(n))})(t,e),y(n)})(t,n))),e},b=t=>{const e=JSON.parse(localStorage.getItem("Projects")),n=document.querySelector("#project-title").textContent;return e.find((t=>t.title==n)).tasks.findIndex((e=>e.title==t))},k=t=>{const e=t.target.parentElement.id.toString(),n=document.querySelector(`[id='${e}']`);if(!n)return;if(""==e)return;const c=(t=>{const e=JSON.parse(localStorage.getItem("Projects")),n=document.querySelector("#project-title").textContent;return e.find((t=>t.title==n)).tasks.find((e=>e.title===t))})(e);n.replaceWith((t=>{const e=document.createElement("div"),n=o(),c=r(),a=x(t),i=E(t),d=S(),s=A(t);return n.textContent=t.title,c.textContent=t.description,e.append(n,c,a,i,d,s),e})(c))},h=()=>{M([])},I=()=>{const t=(new Date).toISOString(),e=[],n=[];for(let o=0;o<localStorage.length;o++){if("Projects"==localStorage.key(o))continue;const r=JSON.parse(localStorage.getItem(localStorage.key(o)));new Date(r.dueDate).toDateString()!=(new Date).toDateString()&&"no due date"!=r.dueDate?t>new Date(r.dueDate).toISOString()&&e.push(r):n.push(r)}L(e,n)},L=(t,e)=>{const n=document.querySelector("#main-content");n.replaceChildren();const o=document.createElement("div");0==t.length?o.textContent="":o.textContent="OverDue";const r=document.createElement("div");0==e.length?r.textContent="No tasks for today":r.textContent="Today";const c=document.createElement("div");c.id="content",T(t,o),T(e,r),c.append(o,r),n.append(c,N())},T=(t,e)=>{for(let n=0;n<t.length;n++){const o=q(t[n]);e.append(o)}return e},q=t=>{const e=document.createElement("div");e.id=t.title,e.addEventListener("click",(t=>j(t)));const n=document.createElement("div"),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),a=document.createElement("input");return a.type="checkbox",a.addEventListener("click",(t=>(t=>{const e=document.querySelector("#main-content"),n=localStorage.getItem(t.target.parentElement.id);localStorage.removeItem(t.target.parentElement.id),$(n,"Today"),e.replaceChildren(),I()})(t))),n.innerHTML=`Task:${t.title}`,o.innerHTML=`details:${t.description}`,r.textContent=`Due date:${t.dueDate}`,c.textContent=`Priority:${t.priority}`,e.append(a,n,o,r,c),e},j=t=>{const e=t.target.parentElement.id,n=JSON.parse(localStorage.getItem(e));if(!n)return;const o=t.target.parentElement,r=D(n);o.replaceWith(r)},D=t=>{const e=document.createElement("div"),n=o(t);n.textContent=t?.title;const a=r(t);a.textContent=t?.description;const i=c(t);i.querySelector("input").value=t?.dueDate;const d=E(t),s=O(),l=P(t);return e.append(n,a,i,d,s,l),e},N=()=>{const t=document.createElement("div");return t.textContent="Add a Task",t.classList.add("add-task"),t.addEventListener("click",(()=>(t=>{const e=document.createElement("div"),n=o(),a=r(),i=c(),d=E(),s=O(),l=P();return e.append(n,a,i,d,s,l),t.replaceWith(e),t})(t))),t},O=()=>{const t=document.createElement("button");return t.type="button",t.textContent="Cancel",t.addEventListener("click",(()=>I())),t},P=t=>{const e=document.createElement("button");return e.type="button",e.textContent="Submit",e.addEventListener("click",(()=>B(t))),e},B=t=>{if(!t)return w();const e=t.title,n=document.querySelector('[data-text="Task Name"]').textContent,o=document.querySelector('[data-text="Task Description"]').textContent,r=document.querySelector('input[type="date"]').value,c=document.querySelector(".active-button").textContent;t.title=n,t.description=o,t.dueDate?t.dueDate=r:t.dueDate="no due date",t.priority=c||"no priority set",J(t,e),I()},w=()=>{const e=document.querySelector('[data-text="Task Name"]').textContent,n=document.querySelector('[data-text="Task Description"]').textContent;let o=document.querySelector('input[type="date"]').value,r=document.querySelector(".active-button").textContent;o||(o="no due date"),r||(r="no priority set");const c=t(e,n,o,r,(new Date).toISOString);J(c),I()},J=(t,e)=>{localStorage.removeItem(e),localStorage.setItem(t.title,JSON.stringify(t))},$=(t,e)=>{document.querySelector("main-content");const n=document.createElement("div");n.id="pop-up",n.textContent="1 task completed!   ";const o=document.createElement("span");o.textContent="undo",o.addEventListener("click",(()=>((t,e,n)=>{const o=JSON.parse(t);localStorage.setItem(o.title,t),n?"Today"==n&&I():M(),e.remove()})(t,n,e))),n.append(o),setTimeout((()=>{n.remove()}),2e3),document.body.append(n)};function M(t){const e=document.querySelector("#main-content"),n=document.createElement("div");e.replaceChildren(),t||(t=[]);const o=t;return H(o),Z(o,n),n.append(et()),e.append(n),e}const H=t=>{for(let e=0;e<=localStorage.length-1;e++){const n=JSON.parse(localStorage.getItem(localStorage.key(e)));n.title&&t.push(n)}return t.sort((function(t,e){return t.dateAdded<e.dateAdded?-1:t.dateAdded>e.dateAdded?1:0})),t},Z=(t,e)=>{for(let n=0;n<t.length;n++){const o=W(t[n]);e.append(o)}return e},W=t=>{const e=document.createElement("div");e.id=t.title,e.addEventListener("click",(t=>R(t)));const n=document.createElement("div"),o=document.createElement("div"),r=document.createElement("div"),c=document.createElement("div"),a=document.createElement("input");return a.type="checkbox",a.addEventListener("click",(t=>(t=>{const e=document.querySelector("#main-content"),n=localStorage.getItem(t.target.parentElement.id);localStorage.removeItem(t.target.parentElement.id),$(n),e.replaceChildren(),M()})(t))),n.innerHTML=`Task:${t.title}`,o.innerHTML=`details:${t.description}`,r.textContent=`Due date:${t.dueDate}`,c.textContent=`Priority:${t.priority}`,e.append(a,n,o,r,c),e},R=t=>{const e=t.target.parentElement.id,n=JSON.parse(localStorage.getItem(e));if(!n)return;const o=t.target.parentElement,r=U(n);o.replaceWith(r)},U=t=>{const e=document.createElement("div");return e.append(z(t),F(t),_(t),V(t),G(t),X()),e},z=t=>{const e=o();return e.textContent=t.title,e},F=t=>{const e=r();return e.textContent=t.description,e},_=t=>{const e=c();return e.querySelector("input").value=t.dueDate,e},V=t=>E(t),X=()=>{const t=document.createElement("button");return t.type="button",t.textContent="Cancel",t.addEventListener("click",(()=>M())),t},G=t=>{const e=document.createElement("button");return e.type="button",e.textContent="Submit",e.addEventListener("click",(()=>K(t))),e},K=t=>{const e=t.title,n=document.querySelector('[data-text="Task Name"]').textContent,o=document.querySelector('[data-text="Task Description"]').textContent,r=document.querySelector('input[type="date"]').value,c=document.querySelector(".active-button");if(t.title=n,t.description=o,!n)return displayTasksInProject(projectName),alert("Input a task name");t.dueDate?t.dueDate=r:t.dueDate="no due date",t.priority=c?c.textContent:"no priority set",Q(t,e),M()},Q=(t,e)=>{localStorage.removeItem(e),localStorage.setItem(t.title,JSON.stringify(t))},Y=(t,e)=>{const n=document.createElement("div");n.id="add-project-input";const o=document.createElement("input");o.id="input-project-name";const r=document.createElement("button");r.addEventListener("click",(()=>((t,e,n)=>{const o=localStorage.getItem("Projects"),r=t.value;if(!r)return alert("Project name can't be empty");if(o){const t=JSON.parse(o);if(1==t.some((t=>t.title==r)))return alert("Project name already exist!");const e={title:r,tasks:[]};localStorage.setItem("Projects",JSON.stringify([...t,e]))}else localStorage.setItem("Projects",JSON.stringify([{title:r,tasks:[]}]));p(),m(r),y(r),e.replaceWith(n)})(o,n,e))),r.textContent="add";const c=document.createElement("button");c.textContent="cancel",c.addEventListener("click",(()=>((t,e)=>{t.replaceWith(e)})(n,e))),n.textContent="Project Name:",n.append(o,r,c),t.target.replaceWith(n)};function tt(){const t=document.createElement("div");return t.textContent="Add Project",t.id="add-project",t.addEventListener("click",(e=>Y(e,t))),t}function et(){const t=document.createElement("div");return t.textContent="Add a Task",t.classList.add("add-task"),t.addEventListener("click",e),t}var nt=n(379),ot=n.n(nt),rt=n(795),ct=n.n(rt),at=n(569),it=n.n(at),dt=n(565),st=n.n(dt),lt=n(216),ut=n.n(lt),mt=n(589),pt=n.n(mt),vt=n(158),gt={};gt.styleTagTransform=pt(),gt.setAttributes=st(),gt.insert=it().bind(null,"head"),gt.domAPI=ct(),gt.insertStyleElement=ut(),ot()(vt.Z,gt),vt.Z&&vt.Z.locals&&vt.Z.locals;var yt=n(663),ft={};ft.styleTagTransform=pt(),ft.setAttributes=st(),ft.insert=it().bind(null,"head"),ft.domAPI=ct(),ft.insertStyleElement=ut(),ot()(yt.Z,ft),yt.Z&&yt.Z.locals&&yt.Z.locals;var Ct=n(209),xt={};xt.styleTagTransform=pt(),xt.setAttributes=st(),xt.insert=it().bind(null,"head"),xt.domAPI=ct(),xt.insertStyleElement=ut(),ot()(Ct.Z,xt),Ct.Z&&Ct.Z.locals&&Ct.Z.locals,function(){document.body.replaceChildren();const t=document.querySelector("body"),e=document.createElement("main");e.append(function(){const t=document.createElement("div");t.id="sidebar";const e=document.createElement("div");e.textContent="Home",e.id="sidebarHome",e.addEventListener("click",h);const n=document.createElement("div");n.textContent="Today",n.addEventListener("click",I);const o=document.createElement("div");o.textContent="Week";const r=document.createElement("div");return r.textContent="Projects",r.id="sidebar-projects",r.append(tt()),t.append(e,n,o,r),t}(),function(){const t=document.createElement("div");return t.id="main-content",t.replaceChildren(),t}()),t.append(function(){const t=document.createElement("header"),e=document.createElement("div");return e.textContent=" To-do List",t.append(e),t}(),e,function(){const t=document.createElement("footer");return t.textContent="copyright 2023",t}()),M()}(),M(),p()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,